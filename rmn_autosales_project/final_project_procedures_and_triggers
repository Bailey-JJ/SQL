--Selling a car
create procedure InsertNewCarSale
    @VIN char(17),
    @SaleDate date,
    @SalePrice decimal(10, 2),
    @CustomerID char(8),
    @EmployeeID char(8),
    @DownPayment decimal(10, 2),
    @FinancedAmount decimal(10, 2),
    @ConditionID varchar(10),
    @MilesAtSale int,
    @WarrantyID int = NULL
as
begin
    begin transaction;

    begin try
        -- Insert into SalesHeader
        declare @SaleID char(8);
        set @SaleID = FORMAT(GETDATE(), 'yyyyMMddHHmmss')

        insert into SalesHeader (sale_id, employee_id, customer_id, sale_date, total_due, down_payment, financed_amount)
        values (@SaleID, @EmployeeID, @CustomerID, @SaleDate, @SalePrice, @DownPayment, @FinancedAmount);

        -- Insert into CarsSold
        declare @ItemID char(8);
        set @ItemID = FORMAT(GETDATE(), 'HHmmss');

        insert into CarsSold (sale_id, item_id, condition_id, VIN, warranty_id, miles_at_sale, sale_price)
        values (@SaleID, @ItemID, @ConditionID, @VIN, @WarrantyID, @MilesAtSale, @SalePrice);

        commit transaction;
    end try
    begin catch
        rollback transaction;

        throw;
    end catch
end;

exec InsertNewCarSale
    @VIN = '1N4AA5AP7EC266511',
    @SaleDate = '2024-12-03',
    @SalePrice = 43544.77,
    @CustomerID = '11975772',
    @EmployeeID = '18',
    @DownPayment = 5000.00,
    @FinancedAmount = 38544.77,
    @ConditionID = 'GOOD',
    @MilesAtSale = 241600,
    @WarrantyID = NULL;



--Calculate Monthly Revenue
create proc CalculateMonthlyRevenue
    @Year int,
    @Month int
as
begin
    select 
        FORMAT(sale_date, 'MMMM yyyy') as MonthYear,
        COUNT(DISTINCT sh.sale_id) as TotalSales,
        SUM(cs.sale_price) as TotalRevenue
    from SalesHeader sh
    join CarsSold cs on sh.sale_id = cs.sale_id
    where YEAR(sh.sale_date) = @Year and MONTH(sh.sale_date) = @Month
    group by YEAR(sh.sale_date), MONTH(sh.sale_date);
end;

exec CalculateMonthlyRevenue @Year = 2024, @Month = 08;



--Seeing a Customer's Purchases
create proc GetCustomerPurchaseHistory
    @CustomerID char(8)
as
begin
    select 
        sh.sale_date,
        cs.VIN,
        c.make,
        c.model,
        c.year,
        c.color,
        cs.sale_price,
        cl.condition
    from SalesHeader sh
    join CarsSold cs on sh.sale_id = cs.sale_id
    join Car c on cs.VIN = c.VIN
    join ConditionLookup cl on cs.condition_id = cl.condition_id
    where sh.customer_id = @CustomerID
    order by sh.sale_date DESC;
end;

exec GetCustomerPurchaseHistory @CustomerID = '40404234';


--do something similar but with employees and be able to see the details of the cars they have sold.